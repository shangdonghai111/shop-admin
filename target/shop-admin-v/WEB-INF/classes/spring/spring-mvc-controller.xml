<?xml version="1.0" encoding="GBK"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"  
    xmlns:security="http://www.springframework.org/schema/security" 
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xsi:schemaLocation="  
        http://www.springframework.org/schema/aop   
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/security   
        http://www.springframework.org/schema/security/spring-security-3.2.xsd  
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/data/jpa   
        http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd  
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
        http://www.springframework.org/schema/mvc   
    	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- 对项目中的所有类进行扫描以完成Bean创建并进行自动注入。  
           支持 @Controller、@Service 以及 @Repository 和 @Component -->
	<!-- 扫描项目中com.fh.shop.controller包下所有的类，从而使类中的@Controller注解生效 -->
	<context:component-scan base-package="com.fh.shop.backend.controller"/>
	<!-- 扫描项目中com.fh.shop.api包下所有的类，从而使类中的@RestController注解生效 -->
	<context:component-scan base-package="com.fh.shop.backend.api"/>

      <!--  jsp视图解析器，对模型视图名称的解析，即在模型视图名称添加前后缀
        如/view/welcome.jsp对应的视图名就是：welcome
        这个类在视图解析器链中一定要定义在其他视图的后面，因为它始终会返回一个视图
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    
<!-- 【扫描@DateTimeFormat注解】加载@DateTimeFormat-->
    <mvc:annotation-driven conversion-service="conversionService"/>
    
    <bean id="conversionService"
          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
    </bean>
	<!-- 上传文件 -->
	<!-- 配置多媒体处理器 -->
	<!-- 注意：这里id必须填写：multipartResolver -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!--设置编码-->
		<property name="defaultEncoding" value="utf-8"/>
		<!-- 最大内存大小 -->
		<property name="maxInMemorySize" value="10240000"/>
		<!-- 最大文件大小，-1为不限制大小 -->
		<property name="maxUploadSize" value="-1"/>
	</bean>
<!-- 开启注解驱动 -->
<!--  <mvc:annotation-driven/> -->

   <!-- 配置拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
		<!-- 拦截所有请求； springMVC的拦截器 拦截的是所有springMVC里面的请求  在web.xml里面配置的以.jhtml请求的都被拦截-->
		<mvc:mapping path="/**"/>
		<!-- 创建拦截器实例 -->
		<bean class="com.fh.shop.backend.interceptor.LogInterceptor"></bean>
		</mvc:interceptor>
	
	</mvc:interceptors>
	
	<!-- 创建bean实例 -->
	<bean id="log" class="com.fh.shop.backend.logAspect.LogAspect"></bean>
	<!-- 配置aop统一管理log日志 -->
	<aop:config>
		<!-- 配置切面 -->
		<aop:aspect ref="log">
		<!-- 配置切点 -->
			<aop:pointcut expression="execution(* com.fh.shop.backend.controller..*.add*(..))||execution(* com.fh.shop.backend.controller..*.del*(..))||execution(* com.fh.shop.backend.controller..*.update*(..))||execution(* com.fh.shop.backend.controller..*.login(..))||execution(* com.fh.shop.backend.controller..*.loginout(..))" id="logPoint"/>
			<!-- 方位 环绕 -->
			<aop:around method="logAspect" pointcut-ref="logPoint"/>
		</aop:aspect>
	
	
	
	</aop:config>
	
</beans>